[[:digit:]]  숫자 패턴 0,1,2,3,4,5,6,7,8,9 ( [0-9] 와 \d 동일 )
[[^0-9]]   숫자가 아닌 패턴   (\D 와 동일)
[[:lower:]] 영문 소문자 패턴
[[:upper:]] 영문 대문자 패턴
[[:alpha:]]  영문 패턴 (소 대 문자 구분X)
[^[:alpha:]] 영문이 아닌 패턴
[[:alnum:]] 영문&숫자 패턴  (* [[:alpha:][:digit:]]  대괄호로 감싸서 두 패턴 함께 이용 가능)
[[:blank:]] 간격 문자열 패턴(space & tab)
[[:space:]] 공백 문자열 패턴
[[:punct:]] 구두점 문자열 패턴  ! " # $ % & ’ ( ) * + , - . / : ; < = > ? @ [  ] ^ _ ` { | } ~.
[[:cntrl:]] \n \r 등의 제어 문자열 패턴
[가-핳] 한글 문자열 패턴


grep(pattern, text, value=F)
  R 내장 함수이며 문자열 원소를 갖는 vector를 다루는데 사용하며
  이는 특정 pattern을 갖는 원소를 vector가 리턴.
  value=T 일때는 그 문자열이 리턴되며 
  FALSE 일때는 해당 문자열의 벡터 내 인덱스가 리턴.
 

gsub(pattern, replacement, text)
  grep가 특정 패턴을 지닌 원소를 찾는 함수라면 
  gsub은 벡터 내에 존재하는 원소에서 패턴을 찾아내고 
  그 패턴을 replacement인자에 전달한 문자로 변환해 주는 역할을 하는 함수.



예)

text<-c("phone: 010-1234-5678","home: 02-123-1234","이름: 홍길동")

grep("[[:digit:]]", text, value=T)
   [1] "phone: 010-1234-5678" "home: 02-123-1234"   

gsub("[[:digit:]]", "x", text)
   [1] "phone: xxx-xxxx-xxxx" "home: xx-xxx-xxxx"   
   [3] "이름: 홍길동"

# 한글 문자열분석에서 매우 중요한 정규표현식.
grep("[가-핳]", text, value=T) 
   [1] "이름: 홍길동"

grep("[[:lower:]]", text, value=T) 
   [1] "phone: 010-1234-5678" "home: 02-123-1234" 


gsub("^[1-9][0-9]*$",  
     " ",
     c("08","1","19 189","78")) 
#---------------------------------------
# [1] "08"     " "      "19 189" " " 


gsub("^[0-9]+(\\.[0-9]{1,2})?$",
     "zz",
     c("123","123.17","123.456","123.","12.79"))
#-------------------------------------------------
# [1] "zz"      "zz"      "123.456" "123."    "zz" 

gsub("^(0|[1-9][0-9]*)$",
     "qwe"
     ,c("123","0123","789789789","0"))
#-------------------------------------------------
# [1] "qwe"  "0123" "qwe"  "qwe"