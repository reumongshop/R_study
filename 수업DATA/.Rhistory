"1234")
# 작업 디렉토리 안에 data 디렉토리에 ojdbc6.jar 파일이 존재
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver",
classPath="./ojdbc6.jar")
# 자바 JDBC 이용하기 위한 패키지 설정
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("igraph")
# 라이브러리 등록
library(RJDBC)
library(rJava)
library(igraph)
# 작업 디렉토리 안에 data 디렉토리에 ojdbc6.jar 파일이 존재
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver",
classPath="./ojdbc6.jar")
library(rJava)
# 라이브러리 등록
library(RJDBC)
detach("package:rJava", unload = TRUE)
library(rJava)
detach("package:RJDBC", unload = TRUE)
library(RJDBC)
# 작업 디렉토리 안에 data 디렉토리에 ojdbc6.jar 파일이 존재
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver",
classPath="./ojdbc6.jar")
detach("package:rJava", unload = TRUE)
library(rJava)
detach("package:RJDBC", unload = TRUE)
library(RJDBC)
# 작업 디렉토리 안에 data 디렉토리에 ojdbc6.jar 파일이 존재
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver",
classPath="./ojdbc6.jar")
# 작업 디렉토리 안에 data 디렉토리에 ojdbc6.jar 파일이 존재
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver",
classPath="../ojdbc6.jar")
# 작업 디렉토리 안에 data 디렉토리에 ojdbc6.jar 파일이 존재
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver",
classPath="../ojdbc6.jar")
# 작업 디렉토리 안에 data 디렉토리에 ojdbc6.jar 파일이 존재
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver",
classPath="../ojdbc6.jar")
# 작업 디렉토리 안에 data 디렉토리에 ojdbc6.jar 파일이 존재
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver",
classPath="../../ojdbc6.jar")
이용해서
# 데이터에 대한 포인터만 가져온 후
# fetch(커서, n=1)을 이용해서
# 자바 JDBC 이용하기 위한 패키지 설정
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
library(rJava)
# 라이브러리 등록
library(RJDBC)
library(igraph)
# 작업 디렉토리 안에 data 디렉토리에 ojdbc6.jar 파일이 존재
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver",
classPath="../../ojdbc6.jar")
# 데이터베이스 연결
con <- dbConnect(jdbcDriver,
"jdbc:oracle:@localhost:1521:XE",
"abell",
"1234")
# 데이터베이스 연결
con <- dbConnect(jdbcDriver,
"jdbc:oracle:@localhost:1521:XE",
"abel",
"1234")
# 데이터베이스 연결
con <- dbConnect(jdbcDriver,
"jdbc:oracle:@localhost:1521:XE",
"abell",
"1234")
result <- dbGetQuery(con,"select * from book")
# 데이터베이스 연결
con <- dbConnect(jdbcDriver,
"jdbc:oracle:@localhost:1521:XE",
"abel",
"1234")
# 작업 디렉토리 안에 data 디렉토리에 ojdbc6.jar 파일이 존재
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver",
classPath="../../ojdbc6.jar")
# 데이터베이스 연결
con <- dbConnect(jdbcDriver,
"jdbc:oracle:@localhost:1521:XE",
"abel",
"1234")
View(data4)
# 데이터베이스 연결
con <- dbConnect(jdbcDriver,
"jdbc:oracle:@localhost:1521:XE",
"abel",
"1234")
# 작업 디렉토리 안에 data 디렉토리에 ojdbc6.jar 파일이 존재
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver",
classPath="../../ojdbc6.jar")
# 데이터베이스 연결
con <- dbConnect(jdbcDriver,
"jdbc:oracle:@localhost:1521:XE",
"abel",
"1234")
# 데이터베이스 연결
con <- dbConnect(jdbcDriver,
"jdbc:oracle:thin:@localhost:1521:XE",
"abel",
"1234")
# select 구문을 실행 후 저장
result <- dbGetQuery(con,"select * from book")
# select 구문을 실행 후 저장
result <- dbGetQuery(con, "select * from book")
# select 구문을 실행 후 저장
result <- dbGetQuery(con, "select * from emp")
View(result)
View(result)
#유형확인
class(result)
#실행결과 가지고 그래프 그릴 수 있는 프레임으로 변환
g <- graph.data.frame(result, directed=T)
#관계도 작성
plot(g,
layout=layout.frunchterman.reingold,
vertext.size=8,
edge.array.size=0.5)
#유형확인
class(result)
#실행결과 가지고 그래프 그릴 수 있는 프레임으로 변환
g <- graph.data.frame(result, directed=T)
#관계도 작성
plot(g,
layout=layout.frunchterman.reingold,
vertext.size=8,
edge.array.size=0.5)
#관계도 작성
plot(g,
layout=layout.frunchterman.reingold,
vertext.size=8,
edge.array.size=0.5)
library(plotrix)
#관계도 작성
plot(g,
layout=layout.frunchterman.reingold,
vertext.size=8,
edge.array.size=0.5)
library(plotly)
#관계도 작성
plot(g,
layout=layout.frunchterman.reingold,
vertext.size=8,
edge.array.size=0.5)
detach("package:plotrix", unload = TRUE)
detach("package:plotly", unload = TRUE)
#오라클 쿼리 실행(sqldf 패키지)
#오라클 sql 쿼리문을 이용하기 위한 패키지 설정
install.packages("sqldf")
#오라클 쿼리문 이용하기 위한 라이브러리 등록
library(sqldf)
head(iris)
sqldf("select Species from iris")
# head
head(iris)
sqldf("select * from iris limit 4")
# select 구문을 실행하고 저장하기
tablelists <- dbGetQuery(con,"select * from tab")
result <- dbGetQuery(con,"select * from PRODUCT_TABLE")
# select 구문을 실행 후 저장
result <- dbGetQuery(con, "select * from emp")
# select 구문을 실행하고 저장하기
tablelists <- dbGetQuery(con,"select * from tab")
result <- dbGetQuery(con,"select * from emp")
# 유형확인
class(result)
#실행결과 가지고 그래프 그릴 수 있는 프레임으로 변환
g <- graph.data.frame(result, directed=T)
#관계도 작성
plot(g,
layout=layout.frunchterman.reingold,
vertext.size=8,
edge.array.size=0.5)
#관계도 작성
plot(g,
layout=layout.fruchterman.reingold,
vertex.size=8,
edge.array.size=0.5)
#subset
subset(iris, Species %in% c("setosa"))
sqldf("select * from iris where Species in ('setosa)")
sqldf("select * from iris where Species in ('setosa')")
subset(iris, Spal.Length > 5 & Sepal.Length < 5.2)
sqldf('select * from iris where "Sepal.Length" between 5 and 6')
#subset
subset(iris, Species %in% c("setosa"))
sqldf("select * from iris where Species in ('setosa')")
subset(iris, Sepal.Length >= 5 & Sepal.Length <= 5.2)
sqldf('select * from iris where "Sepal.Length" between 5 and 6')
url <- 'http://www.kma.go.kr/weather/forecast/mid-term-xml.jsp?stnId=109'
# 문자열 다운로드
weather <- read_html(url)
weather
# 문자열 다운로드
weather <- read_html(url)
weather
tmn <- weather %>%html_nodes("tmn") %>% html_text()
tmn
library(dplyr)
url <- 'http://www.kma.go.kr/weather/forecast/mid-term-xml.jsp?stnId=109'
# 문자열 다운로드
weather <- read_html(url)
weather
tmn <- weather %>%html_nodes("tmn") %>% html_text()
tmn
library(rvest)
url <- 'http://www.kma.go.kr/weather/forecast/mid-term-xml.jsp?stnId=109'
# 문자열 다운로드
weather <- read_html(url)
weather
tmn <- weather %>% html_nodes("tmn") %>% html_text()
tmn
# 패키지 설치
install.packages("jsonlite")
install.packages("httr")
# 패키지 로드
rm(list=ls())
library(httr)
library(jsonlite)
# JSON 데이터 가져오기
df <- fromJSON(https://api.github.com/users/hadley/repos)
# JSON 데이터 가져오기
df <- fromJSON("https://api.github.com/users/hadley/repos")
df
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
rmarkdown::render("20200407_Markdown.rmd")
*이탈릭체*
_이탈릭체_
![](Lighthouse.jpb)
![홈페이지에서 불러온 이미지](http://abs.twimg.com/emoji/v2/svg/1f914.svg)
![홈페이지에서 불러온 이미지](http://abs.twimg.com/emoji/v2/svg/1f914.svg)
![홈페이지에서 불러온 이미지](http://abs.twimg.com/emoji/v2/svg/1f914.svg)
ggplot(data=c, aes(x=a,y=b)) +
geom_point() +
geom_line(color="BLUE")
a=-5:5
b=a^3
c=data.frame(a,b)
library(ggplot2)
ggplot(data=c, aes(x=a,y=b)) +
geom_point() +
geom_line(color="BLUE")
a=-5:5
b=a^3
c=data.frame(a,b)
library(ggplot2)
ggplot(data=c, aes(x=a,y=b)) +
geom_point() +
geom_line(color="BLUE")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
```{r exp, eval=FALSE, include=FALSE}
#install.packages("stargazer")
library(stargazer)
install.packages("stargazer")
library(stargazer)
install.packages("stargazer")
install.packages("stargazer")
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
stargazer(head(mtcars), summary=F,
type="html",
title="stargazer 패키지 활용한 표")
install.packages("DT")
install.packages("DT")
library(DT)
datatable(iris,
caption = "DT 패키지 활용한 표",
filter = "top")
datatable(iris,
caption = "DT 패키지 활용한 표",
filter = "top")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(knitr)
setwd("../수업DATA/cust_seg_smpl_280122.csv")
setwd("../수업DATA/")
head(read.csv('cust_seg_smpl_280122.csv'))
data = as.data.frame("cust_seg_smpl_280122.csv")
buy_book(data$최종구매후기간, data$구매서적수)
data.test(data$최종구매후기간, data$구매서적수)
data = as.data.frame("cust_seg_smpl_280122.csv")
data.test(data$최종구매후기간, data$구매서적수)
book_data <- read.csv("../수업DATA/cust_seg_smpl_280122.csv")
head(book_data)
names(book_data)
head(book_data)
plot(jitter(book_data$recency), jitter(book_data$buybooks))
names(book_data) <- c("name", "sex", "age", "region", "recency", "buybooks", "money", "other_money", "total_money", "fav_type", "buy_type", "join_period", "sms_option")
plot(jitter(book_data$recency), jitter(book_data$buybooks))
# 최종 구매 후 기간 recency와 구매한 서적의 수간의 관계 확인
plot(book_data$recency, book_data$buybooks)
# 동일 좌표에 다수의 고객 존재 가능성이 있으므로 이를 처리
plot(jitter(book_data$recency), jitter(book_data$buybooks))
book_data$money <- as.numeric(gsub(",", "", as.character(book_data$money)))
book_data$other_money <- as.numeric(gsub(",", "", as.character(book_data$other_money)))
abline(h=seq(0, 50, 5),
v=seq(1, 25, 1),
col="blue",
lty=2)
line1 <- book_data$buybooks
line2 <- book_data$money
par(mar=c(5, 4, 4, 4))
plot(line1,
type="o",
axes=F,
ylab="",
xlab="",
ylim=c(0, 50),
lty=2,
col="blue",
main="구매기간 대비 구매한 서적의 수",
lwd=2)
plot(jitter(book_data$buybooks), jitter(book_data$money))
par(mar=c(5, 4, 4, 4))
plot(line1,
type="o",
axes=F,
ylab="",
xlab="",
ylim=c(0, 50),
lty=2,
col="blue",
main="구매기간 대비 구매한 서적의 수",
lwd=2)
abline(lm(book_data$buybooks~book_data$recency))
abline(lm(book_data$buybooks~book_data$recency), col="blue")
abline(lm(book_data$buybooks~book_data$recency), col="blue")
# 최종 구매 후 기간 recency와 구매한 서적의 수간의 관계 확인
plot(book_data$recency, book_data$buybooks)
# 동일 좌표에 다수의 고객 존재 가능성이 있으므로 이를 처리
plot(jitter(book_data$recency), jitter(book_data$buybooks))
abline(lm(book_data$buybooks~book_data$recency), col="blue")
# 동일 좌표에 다수의 고객 존재 가능성이 있으므로 이를 처리
plot(jitter(book_data$recency), jitter(book_data$buybooks))
library(ggplot2)
ggplot(data=book_data,
aes(x=recency, y=buybooks)) +
geom_point()
# 동일 좌표에 다수의 고객 존재 가능성이 있으므로 이를 처리
plot(jitter(book_data$recency), jitter(book_data$buybooks))
ggplot(data=book_data,
aes(x=recency, y=buybooks)) +
geom_point()
book_data$money <- as.numeric(gsub(",", "", as.character(book_data$money)))
book_data$other_money <- as.numeric(gsub(",", "", as.character(book_data$other_money)))
plot(jitter(book_data$buybooks), jitter(book_data$money))
abline(lm(book_data$money~book_data$other_money), col="blue")
plot.new()
abline(lm(book_data$money~book_data$other_money), col="blue")
abline(h=book_data$money,
v=book_data$other_money,
reg=null)
abline(h=book_data$money,
v=book_data$other_money,)
abline(h=book_data$money,
v=book_data$other_money)
library(abline)
abline(lm(book_data$money~book_data$other_money), col="blue")
norm(lm(book_data$money~book_data$other_money), col="blue")
abline(lm(book_data$money~book_data$other_money), col="blue")
book_data$money <- as.numeric(gsub(",", "", as.character(book_data$money)))
book_data$other_money <- as.numeric(gsub(",", "", as.character(book_data$other_money)))
# gsub함수로 쉼표 제거
book_data$money <- as.numeric(gsub(",", "", as.character(book_data$money)))
book_data$other_money <- as.numeric(gsub(",", "", as.character(book_data$other_money)))
plot(jitter(book_data$buybooks), jitter(book_data$money))
plot(jitter(book_data$buybooks), jitter(book_data$money))
# 컬럼명 변경
names(book_data) <- c("name", "sex", "age", "region", "recency", "buybooks", "money", "other_money", "total_money", "fav_type", "buy_type", "join_period", "sms_option")
# 최종 구매 후 기간 recency와 구매한 서적의 수간의 관계 확인
plot(book_data$recency, book_data$buybooks)
ggplot(data=book_data,
aes(x=recency, y=buybooks)) +
geom_point()
abline(lm(book_data$money~book_data$other_money), col="blue")
# gsub함수로 쉼표 제거
book_data$money <- as.numeric(gsub(",", "", as.character(book_data$money)))
book_data$other_money <- as.numeric(gsub(",", "", as.character(book_data$other_money)))
plot(jitter(book_data$buybooks), jitter(book_data$money))
# gsub함수로 쉼표 제거
book_data$money <- as.numeric(gsub(",", "", as.character(book_data$money)))
book_data$other_money <- as.numeric(gsub(",", "", as.character(book_data$other_money)))
plot(jitter(book_data$recency), jitter(book_data$buybooks))
# gsub함수로 쉼표 제거
book_data$recency <- as.numeric(gsub(",", "", as.character(book_data$recency)))
book_data$buybooks <- as.numeric(gsub(",", "", as.character(book_data$buybooks)))
plot(jitter(book_data$recency), jitter(book_data$buybooks))
# 파란 직선
abline(lm(book_data$recency~book_data$buybooks), col="blue")
# gsub함수로 쉼표 제거
book_data$recency <- as.numeric(gsub(",", "", as.character(book_data$recency)))
book_data$buybooks <- as.numeric(gsub(",", "", as.character(book_data$buybooks)))
plot(jitter(book_data$recency), jitter(book_data$buybooks))
# 파란 직선
abline(lm(book_data$buybooks~book_data$recency), col="blue")
# 파란 직선
# abline(a=NULL,
#        b=NULL,
#        h=recency,
#        v=buybooks,
#        )
plot(book_data$recency~book_data$buybooks)
abline(lm(book_data$buybooks~book_data$recency), col="blue")
abline(lm(book_data$recency~book_data$buybooks), col="blue")
abline(lm(book_data$recency~book_data$buybooks), col="blue")
abline(lm(book_data$recency~book_data$buybooks), col="blue", lwd=2, lty=1)
abline(lm(book_data$recency~book_data$buybooks), col="blue", lwd=2, lty=1)
book_data$recency <- as.numeric(gsub(",", "", as.character(book_data$recency)))
book_data$buybooks <- as.numeric(gsub(",", "", as.character(book_data$buybooks)))
plot(jitter(book_data$recency), jitter(book_data$buybooks))
# 파란 직선
abline(lm(book_data$recency~book_data$buybooks), col="blue", lwd=2, lty=1)
abline(lm(book_data$recency~book_data$buybooks), col="blue", lwd=2, lty=1)
book_data$recency <- as.numeric(gsub(",", "", as.character(book_data$recency)))
book_data$buybooks <- as.numeric(gsub(",", "", as.character(book_data$buybooks)))
plot(jitter(book_data$recency), jitter(book_data$buybooks))
# 파란 직선
abline(lm(book_data$recency~book_data$buybooks), col="blue", lwd=2, lty=1)
abline(lm(book_data$buybooks~book_data$recency), col="blue", lwd=2, lty=1)
plot(jitter(book_data$buybooks)), jitter(book_data$recency))
abline(lm(book_data$buybooks~book_data$recency), col="blue", lwd=2, lty=1)
book_data$recency <- as.numeric(gsub(",", "", as.character(book_data$recency)))
book_data$buybooks <- as.numeric(gsub(",", "", as.character(book_data$buybooks)))
plot(jitter(book_data$buybooks)), jitter(book_data$recency))
book_data$recency <- as.numeric(gsub(",", "", as.character(book_data$recency)))
book_data$buybooks <- as.numeric(gsub(",", "", as.character(book_data$buybooks)))
plot(jitter(book_data$buybooks), jitter(book_data$recency))
# 파란 직선
abline(lm(book_data$buybooks~book_data$recency), col="blue", lwd=2, lty=1)
plot(book_data,
names.arg=label,
ylab="buybooks",
xlab="recency",
ylim=c(0, 20),
main="구매한 기간 대비 구매 서적 수")
qplot(data=book_data,
x=recency,
y=buybooks,
geom="boxplot",
names.arg=label,
ylab="buybooks",
xlab="recency",
ylim=c(0, 20),
main="구매한 기간 대비 구매 서적 수")
plot(data=book_data, x=recency, y=buybooks)
plot(book_data,
names.arg=label,
ylab="buybooks",
xlab="recency",
ylim=c(0, 20),
main="구매한 기간 대비 구매 서적 수")
# gsub함수로 쉼표 제거
book_data$recency <- as.numeric(gsub(",", "", as.character(book_data$recency)))
book_data$buybooks <- as.numeric(gsub(",", "", as.character(book_data$buybooks)))
plot(data=book_data, x=recency, y=buybooks)
plot(book_data,
names.arg=label,
ylab="buybooks",
xlab="recency",
ylim=c(0, 20),
main="구매한 기간 대비 구매 서적 수")
# 패키지 로드
library(rmarkdown)
library(knitr)
# 데이터 불러오기
book_data <- read.csv("../수업DATA/cust_seg_smpl_280122.csv")
# 데이터 확인
head(book_data)
names(book_data)
# 컬럼명 변경
names(book_data) <- c("name", "sex", "age", "region", "recency", "buybooks", "money", "other_money", "total_money", "fav_type", "buy_type", "join_period", "sms_option")
# 최종 구매 후 기간 recency와 구매한 서적의 수간의 관계 확인
plot(book_data$recency, book_data$buybooks)
# 최종 구매 후 기간 recency와 구매한 서적의 수간의 관계 확인
plot(book_data$recency, book_data$buybooks)
# 동일 좌표에 다수의 고객 존재 가능성이 있으므로 이를 처리
plot(jitter(book_data$recency), jitter(book_data$buybooks))
library(ggplot2)
ggplot(data=book_data,
aes(x=recency, y=buybooks)) +
geom_point()
# gsub함수로 쉼표 제거
book_data$recency <- as.numeric(gsub(",", "", as.character(book_data$recency)))
book_data$buybooks <- as.numeric(gsub(",", "", as.character(book_data$buybooks)))
plot(data=book_data, x=recency, y=buybooks)
plot(book_data,
names.arg=label,
ylab="buybooks",
xlab="recency",
ylim=c(0, 20),
main="구매한 기간 대비 구매 서적 수")
qplot(book_data)
qplot(data=book_data, x=book_data$recency, y=book_data$buybooks)
ml <- qplot(data=book_data, x=book_data$recency, y=book_data$buybooks)
abline(data, ml, col="blue")
abline(data(ml, col="blue")
abline(data(ml, col="blue"))
abline(lm(book_data$buybooks~book_data$recency), col="blue", lwd=2, lty=1)
plot(jitter(book_data$buybooks), jitter(book_data$recency))
abline(lm(book_data$buybooks~book_data$recency), col="blue", lwd=2, lty=1)
